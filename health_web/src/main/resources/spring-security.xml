<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                          http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/mvc
                          http://www.springframework.org/schema/mvc/spring-mvc.xsd
                          http://code.alibabatech.com/schema/dubbo
                          http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                          http://www.springframework.org/schema/context
                          http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">
    <!--1：定义哪些链接可以放行 ，不需要任何权限就可以访问的页面
        security:http security="none" pattern="/js/**"：表示js下的所有资源，不需要任何权限也可以访问
    -->
    <security:http security="none" pattern="/login.html"></security:http>
    <security:http security="none" pattern="/js/**"></security:http>
    <security:http security="none" pattern="/css/**"></security:http>
    <security:http security="none" pattern="/img/**"></security:http>
    <security:http security="none" pattern="/plugins/**"></security:http>

    <!--开启权限注解支持-->
    <security:global-method-security pre-post-annotations="enabled"></security:global-method-security>

    <!--2：定义哪些链接不可以放行，即需要有角色、权限才可以放行
        auto-config="true"：表示自动配置，如果没有提供登录页面，SpringSecurity底层会生成一个登录页面，用于测试（测试登录、退出等功能，这些功能都是springSecurity底层实现的）
        use-expressions="true"：表示设置角色、权限的时候，使用SpringSecurity的表达式

        security:intercept-url：用来设置哪些链接不可以放行
            pattern="/**"：项目根路径下的所有资源，都必须使用对应的角色、权限才能访问
            access="hasRole('ROLE_ADMIN')"：表示设置角色和权限，表示只要具有ROLE_ADMIN的角色才能访问
            access="hasAuthority('add_checkitem')"：表示设置角色和权限，表示只要具有add_checkitem的权限才能访问
            access="isAuthenticated()"：表示只要完成登录认证，就可以访问

    -->
    <security:http auto-config="true" use-expressions="true">
        <!--springSecurity默认对iframme标签进行拦截，需要放行-->
        <security:headers>
            <security:frame-options policy="SAMEORIGIN"></security:frame-options>
        </security:headers>

        <security:intercept-url pattern="/pages/**" access="isAuthenticated()"></security:intercept-url>
        <!--对页面完成权限控制-->
        <!--<security:intercept-url pattern="/a.html" access="isAuthenticated()"></security:intercept-url>-->
        <!--<security:intercept-url pattern="/b.html" access="hasRole('ROLE_ADMIN')"></security:intercept-url>-->
        <!--<security:intercept-url pattern="/c.html" access="hasAuthority('add_checkitem')"></security:intercept-url>-->
        <!--<security:intercept-url pattern="/d.html" access="hasAuthority('update_checkitem')"></security:intercept-url>-->


        <!--对登录信息的操作，不使用SpringSecurity提供的登录页面
                login-page="/login.html"：表示登录页面
                login-processing-url="/login.do"：登录页面中登录操作跳转的url
                username-parameter="username"：登录页面用户名的表单名称
                password-parameter="password"：登录页面密码的表单名称
                default-target-url="/index.html"：登录成功后，跳转的url页面（首页）
                authentication-failure-url="/login.html"：登录失败后，跳转的url页面（登录页）
                always-use-default-target=""：始终跳转到默认的目标页面（true，表示如果登录成功，默认跳转到成功页面/index.html）
        -->
        <security:form-login login-page="/login.html"
                             login-processing-url="/login.do"
                             username-parameter="username"
                             password-parameter="password"
                             default-target-url="/pages/main.html"
                             authentication-failure-url="/login.html"
                             always-use-default-target="true"></security:form-login>
        <!--对退出功能的操作
            logout-url="/logout.do"：退出的url地址
            logout-success-url="/login.html" ：退出成功后跳转的页面
            invalidate-session="true"：退出的同时，清空Session
        -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"></security:logout>
        <!--关闭csrf盗链-->
        <security:csrf disabled="true"></security:csrf>
    </security:http>

    <!--3：认证管理，定义登录账号名和密码，并授予访问的角色、权限
    security:user：用于手动定义登录用户、登录密码、角色/权限的名称
        name=""：登录用户名
        password=""：登录密码
        authorities=""：角色/权限的名称
    -->
    <!--<security:authentication-manager>-->
        <!--<security:authentication-provider>-->
            <!--<security:user-service>-->
                <!--<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"></security:user>-->
            <!--</security:user-service>-->
        <!--</security:authentication-provider>-->
    <!--</security:authentication-manager>-->

    <!--目的是从数据库查询用户名和密码，并赋予角色、权限-->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <security:password-encoder ref="bCryptPasswordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--创建BCryptPasswordEncoder对象，相当于passwordEncoder.matches代码进行封装-->
    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>


</beans>